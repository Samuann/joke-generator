{"version":3,"sources":["services/jokeService.js","enums/jokeTypeEnum.js","components/ListJokes.tsx","assets/icons/chevron-down.svg","components/InputSelect.tsx","components/InputSearch.tsx","enums/jokeCategoryEnum.js","components/DisplayJokes.tsx","store/actions/jokeActions.tsx","App.tsx","reportWebVitals.ts","store/reducers/jokeReducers.tsx","index.tsx","store/store.js"],"names":["baseUrl","jokeService","readJokeInfo","a","axios","get","response","data","getJokeCategoryList","category","getJokeSearched","searchString","jokeTypeEnum","single","twopart","ListJoke","props","firstJoke","secondJoke","jokeString","type","joke","setup","delivery","className","InputSelect","categories","selectAction","useState","toggleDropDown","setToggleDropDown","onClick","src","chevronDown","alt","map","InputSearch","searchAction","placeholder","onChange","event","target","value","jokeCategoryEnum","any","misc","programming","dark","pun","spooky","christmas","connect","state","jokeLists","jokeList","dispatch","updateJokeCategory","jokeCategory","payload","updateJokeList","jokeActions","undefined","jokeInfo","setJokeInfo","setJokeCategory","setJokeList","error","setError","setSearchString","useEffect","jokeServices","then","jokes","catch","console","getCategoryList","search","getCategoryFromSearchString","totalCount","stringSearch","length","ListJokes","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","jokeReducer","action","store","createStore","jokeReducers","composeWithDevTools","Store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f41531c6.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = 'https://v2.jokeapi.dev';\n\nconst readJokeInfo = async () => {\n    const response = await axios.get(`${baseUrl}/info`);\n    return response.data;\n};\n\nconst getJokeCategoryList = async (category) => {\n    const response = await axios.get(`${baseUrl}/joke/${category}?lang=en&safe-mode&amount=10`);\n    return response.data;\n};\n\nconst getJokeSearched = async(searchString, category) => {\n    const response = await axios.get(`${baseUrl}/joke/${category}?lang=en&safe-mode&amount=10&contains=${searchString}`);\n    return response.data;\n}\n\nconst jokeService = {\n    readJokeInfo,\n    getJokeCategoryList,\n    getJokeSearched\n}\n\nexport default jokeService;","const jokeTypeEnum = {\n    single: 'single',\n    twopart: 'twopart'\n}\n\nexport default jokeTypeEnum;","import React from 'react';\nimport { jokeListProps } from '../types/jokeTypes';\nimport jokeTypeEnum from '../enums/jokeTypeEnum';\nimport './ListJoke.scss';\n\nconst displaySingleJoke = (jokeString: string | undefined): JSX.Element => (\n    <p className=\"ListJoke__single-jokes\"> {jokeString} </p>\n);\n\nconst displayTwoPartJoke = (firstJoke: string | undefined, secondJoke: string | undefined): JSX.Element => {\n    return (\n    <div className=\"ListJoke__twopart-jokes\">\n        <span className=\"ListJoke__twopart-setup\"> { firstJoke }</span>\n        <span> { secondJoke } </span>\n    </div>\n    )\n}\n\nconst ListJoke: React.FC<jokeListProps> = (props) => {\n    const { category, type, joke, setup, delivery } = props;\n    return (\n        <>\n            <article className=\"ListJoke\">\n                <header className=\"ListJoke__header\"> \n                    <span className=\"ListJoke__type\"> <strong> Joke Type: </strong> {type} </span>\n                    <span className=\"ListJoke__category\"> <strong> Joke Category: </strong> {category} </span>\n                    \n                </header>\n                <div className=\"ListJoke__jokes\">\n                    {type === jokeTypeEnum.single ? displaySingleJoke(joke) : displayTwoPartJoke(setup, delivery)}\n                </div>\n            </article>\n            <div>\n                \n            </div>\n        </>\n    )\n};\n\nexport default ListJoke;","export default __webpack_public_path__ + \"static/media/chevron-down.6f0f3290.svg\";","import React, {useState} from 'react';\nimport { inputSelectProps } from '../types/jokeTypes';\nimport  './InputSelect.scss';\nimport chevronDown from '../assets/icons/chevron-down.svg';\n\nconst InputSelect: React.FC<inputSelectProps> = (props) => {\n    const { categories, category, selectAction } = props;\n    const [ toggleDropDown, setToggleDropDown ] = useState<boolean>(false);\n\n    const handleToggle = (): void => {\n        setToggleDropDown(!toggleDropDown)\n    };\n\n    const handleSelect = (jokeCategory: string): void => {\n        selectAction(jokeCategory);\n    };\n\n    return (\n        <div className=\"InputSelect\">\n            <button \n                className=\"InputSelect__select-button\"\n                onClick={handleToggle}\n            >\n                <p className=\"InputSelect__select-text\">\n                    Filter <span className=\"InputSelect__category-name\"> {category} </span> category \n                    <img className=\"InputSelect__chevron\" src={chevronDown} alt=\"chevron-down\"/>\n                </p>\n            </button>\n            <ul className={toggleDropDown ? `InputSelect__dropdown-menu` : `InputSelect__dropdown-menu--close`} >\n                {categories?.map(category => {\n                    return <li \n                            className='InputSelect__category-list'\n                            key={category}\n                            onClick={() => handleSelect(category)}\n                            >\n                                { category }\n                            </li>\n                })}\n            </ul>\n        </div>\n    )\n};\n\nexport default InputSelect;","import React from 'react';\nimport { inputSearchProps } from '../types/jokeTypes';\nimport './InputSearch.scss';\n\nconst InputSearch: React.FC<inputSearchProps> = (props) => {\n    const { searchAction } = props;\n    \n    return (\n        <input \n            type='text'\n            placeholder='Search here'\n            className='InputSearch__input'\n            onChange = {(event) => searchAction(event.target.value)}\n        /> \n    )\n}\n\nexport default InputSearch;","const jokeCategoryEnum = {\n    any: 'Any',\n    misc: 'Misc',\n    programming: 'Programming',\n    dark: 'Dark',\n    pun: 'Pun',\n    spooky: 'Spooky',\n    christmas: 'Christmas'\n}\n\nexport default jokeCategoryEnum;","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport jokeServices from '../services/jokeService';\nimport ListJokes from './ListJokes';\nimport InputSelect from './InputSelect';\nimport InputSearch from './InputSearch';\nimport { jokeInfoProps, jokeListProps, jokeState, displayJokesProps } from '../types/jokeTypes';\nimport jokeCategoryEnum  from '../enums/jokeCategoryEnum';\nimport * as jokeActions from '../store/actions/jokeActions';\nimport './DisplayJokes.scss';\n\nconst DisplayJokes: React.FC<displayJokesProps> = (props) => {  \n    const { updateJokeCategory, category, updateJokeList, jokeLists } = props;\n    const [ jokeInfo, setJokeInfo ] = useState<jokeInfoProps | undefined>(undefined);\n    const [ jokeCategory, setJokeCategory ] = useState<string>(category);  \n    const [ jokeList, setJokeList ] = useState<Array<jokeListProps> | []>(jokeLists);\n    const [ error, setError ] = useState<boolean>(false);\n    const [ searchString, setSearchString ] = useState<string>('');\n    \n\n    const getAllJokeInfo = (): void => {\n        jokeServices.readJokeInfo()\n        .then(response => {\n            setJokeInfo(response.jokes);\n        })\n        .catch(error => console.error(error));\n    };\n\n    const getCategoryList = (category: string): void => {\n        jokeServices.getJokeCategoryList(category)\n        .then(response => {\n            setJokeList(response.jokes);\n            updateJokeList(response.jokes);\n            setError(response.error)\n        })\n        .catch(error => console.error(error));\n    };\n\n    const getCategoryFromSearchString = (search: string, category: string): void => {\n        jokeServices.getJokeSearched(search, category)\n        .then(response => {\n            setJokeList(response.jokes);\n            setError(response.error);\n            updateJokeList(response.jokes)\n        })\n        .catch(error => console.error(error));\n    }\n\n    useEffect(getAllJokeInfo, []);\n\n    useEffect(() => getCategoryList(jokeCategory), [jokeCategory]);\n\n    useEffect(() => getCategoryFromSearchString(searchString, jokeCategory), [searchString, jokeCategory]);\n\n    const selectCategory = (category: string): void => {\n        setJokeCategory(category);\n        updateJokeCategory(category)\n    };\n\n    const handleSearchChange = (stringSearch: string): void => {\n        setSearchString(stringSearch);\n    };\n\n    const handleErrorAndWaiting = (): JSX.Element => {\n        if(error && jokeCategory === jokeCategoryEnum.dark) {\n            return (<p> Sorry safe-mode turned on. No Dark jokes available</p>)\n        }\n\n        if(error) {\n            return (<p> Joke retrieval for <strong> {searchString} </strong> is unavailable in <strong> {jokeCategory} </strong> category. \n                        <br/>Please try a different search term or a different category\n                    </p>)\n        }\n\n        return (<p> Waiting... </p>)\n    }\n\n    return (\n        <div className=\"DisplayJokes\">\n            <h1 className=\"DisplayJokes__header\"> Joke Generation</h1>\n            <p className=\"DisplayJokes__sub-header\"> \n                {jokeInfo ?`Our joke generator contains a total of ${jokeInfo?.totalCount} jokes`: `Waiting`}\n            </p>\n            <section className=\"DisplayJokes__filter-search-section\">\n                <InputSelect \n                    categories= {jokeInfo?.categories} \n                    category= {jokeCategory}\n                    selectAction = {selectCategory}\n                    search = {searchString}\n                />\n                <InputSearch searchAction = { handleSearchChange }/>\n            </section>\n            <h4 className=\"DisplayJokes__category-header\">{`Joke Category: ${jokeCategory}`}</h4>\n            <section className=\"DisplayJokes__jokelist-container\">\n    \n                { !error && jokeList?.length\n                    ? (jokeList.map((joke: jokeListProps) => <ListJokes key={joke.id} { ...joke }/> )) \n                    : handleErrorAndWaiting()\n                }\n            </section>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: jokeState) => ({\n    category: state.category,\n    jokeLists: state.jokeList\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    updateJokeCategory: (jokeCategory: string) => {\n        dispatch(jokeActions.setCategory(jokeCategory))\n    },\n    updateJokeList: (jokeList: []) => {\n        dispatch(jokeActions.setJokeList(jokeList))\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayJokes);","import { jokeListProps } from '../../types/jokeTypes';\n\nexport type SetCategoryAction = {type: string, payload: string};\nexport type SetJokeList = {type: string, payload: Array<jokeListProps> }\n\nexport const setCategory = (category: string): SetCategoryAction => ({\n    type: 'SET_CATEGORY',\n    payload: category\n});\n\nexport const setJokeList = (jokeList: []): SetJokeList => ({\n    type: 'SET_JOKE_LIST',\n    payload: jokeList\n})\n\n","import React from 'react';\nimport DisplayJoke from './components/DisplayJokes';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <section className=\"App-Section\">\n      <DisplayJoke/>\n    </section>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { jokeState } from '../../types/jokeTypes'\n\nconst initialState = {\n    category: 'Any',\n    jokeList: []\n};\n\ninterface IJoke {\n    category: string,\n    jokeList: []\n}\n\ntype JokeAction = {\n    type: string,\n    payload: IJoke\n};\n\nconst jokeReducer = (\n    state: jokeState = initialState,\n    action: JokeAction\n) => {\n    switch(action.type) {\n        case 'SET_CATEGORY':\n            return {\n                ...state,\n                category: action.payload\n            }\n        case 'SET_JOKE_LIST':\n            return {\n                ...state,\n                jokeList: action.payload\n            }    \n        default: \n            return state;    \n    }\n}\n\nexport default jokeReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport Store from './store/store';\n\nconst store = Store();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore } from 'redux';\nimport jokeReducers from './reducers/jokeReducers';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\n\nconst Store = () => createStore (\n    jokeReducers,\n    composeWithDevTools()\n);\n\nexport default Store;"],"sourceRoot":""}